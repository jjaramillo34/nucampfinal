[{
        "model": "blog.posttranslation",
        "pk": 1,
        "fields": {
            "language_code": "es",
            "title": "Crea una Aplicación CRUD con FastAPI y MongoDB",
            "title_short": "crea una app",
            "body": "<h1><strong>Crea una Aplicaci&oacute;n CRUD con FastAPI y MongoDB</strong></h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En este tutorial, usted aprendera como desarrollar una API asincr&oacute;nica con&nbsp; <a href=\"https://fastapi.tiangolo.com/\">FastAPI</a>&nbsp;and&nbsp;<a href=\"https://www.mongodb.com/\">MongoDB</a>. Nosotros estaremos usando el paquete <a href=\"https://motor.readthedocs.io/\">Motor</a> para interactuar sincr&oacute;nicamente con MongoDB.</p>\r\n\r\n<h2><strong>Objectivos</strong></h2>\r\n\r\n<p>Al final de este tutorial, podr&aacute;s:</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Desarrollar una RESTful API con Python and FastAPI.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Interactuar con MongoDB sincr&oacute;nicamente.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Ejecutar MongoDB en la cloud con MongoDB Atlas</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Implementar una aplicaci&oacute;n FastAPI en Heroku</p>\r\n\t</li>\r\n</ol>\r\n\r\n<h2><strong>Configuraci&oacute;n Inicial</strong></h2>\r\n\r\n<p>Comience creando una nueva carpeta para guardar su proyecto llamado &quot;fastapi-mongo&quot;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>mkdir fastapi-mongo</p>\r\n\r\n<p>cd fastapi-mongo</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, crea y activa el ambiente virtual:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>python3.9 -m venv venv</p>\r\n\r\n<p>source venv/bin/activate</p>\r\n\r\n<p>export PYTHONPATH=$PWD</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Sientete libre de cambiar virtualenv y Pip por <a href=\"https://python-poetry.org/\">Poetry</a> o <a href=\"https://github.com/pypa/pipenv\">Pipenv</a>. Por mas, revisa <a href=\"https://testdriven.io/blog/python-environments/\">Modern Python Environments</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, crea los siguientes archivos y folders:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>├── apps</p>\r\n\r\n<p>│ ├── __init__.py</p>\r\n\r\n<p>│ ├── main.py</p>\r\n\r\n<p>│ └── server</p>\r\n\r\n<p>│ ├── app.py</p>\r\n\r\n<p>│ ├── database.py</p>\r\n\r\n<p>│ ├── models</p>\r\n\r\n<p>│ └── routes</p>\r\n\r\n<p>└── requirements.txt</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Agregue las siguientes dependencias a su archivo <em>requirements.txt</em>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>fastapi</p>\r\n\r\n<p>uvicorn</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Instalarlos</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>pip install -r requirements.txt</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><em>El el archivo app/<a href=\"http://main.py\">main.py</a></em>, define un punto de entrada para ejecutar :</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>import uvicorn</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>if __name__ == &quot;__main__&quot;:</p>\r\n\r\n<p>uvicorn.run(&quot;apps.server.app:app&quot;, host=&quot;0.0.0.0&quot;, port=8000, reload=True)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Aqui, le indicamos al archivo que ejecute un servidor <a href=\"https://www.uvicorn.org/\">Uvicorn</a> en el puerto 8000 y se vuelva a cargar en cada cambio de archivo.</p>\r\n\r\n<p>Antes de iniciar el servidor atraves del punto de entrada, crea un ruta(route) base en el archivo <em>app/server/<a href=\"http://app.py\">app.py</a></em>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>from fastapi import FastAPI</p>\r\n\r\n<p>app = FastAPI()</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@app.get(&quot;/&quot;, tags=[&quot;Root&quot;])</p>\r\n\r\n<p>async def read_root():</p>\r\n\r\n<p>return {&quot;message&quot;: &quot;Welcome to this fantastic app!&quot;}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><a href=\"https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags\">Tags</a> son identificadores para agrupar rutas(routes). Las rutas con las mismas etiquetas se agrupan en una seccion de la documentaci&oacute;n de la API.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Ejecute el archivo de punto de entrada desde su consola:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>python apps/main.py</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Navega a <a href=\"http://localhost:8000/\">http://localhost:8000</a> en su navegador. Deber&iacute;as ver:</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&quot;message&quot;: &quot;Welcome to this fantastic app!&quot;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>podr&aacute;s ver la documentaci&oacute;n de la API interactiva en <a href=\"http://localhost:8000/docs\">http://localhost:8000/docs</a>:</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+eb0831961b74029df6bda36344444e79+https://www.evernote.com/shard/s476/res/e64cbdeb-b245-5126-b1d4-ab3e599f7320\" /></p>\r\n\r\n<h2>Rutas (Routes)</h2>\r\n\r\n<p>Nosotros construiremos una aplicaci&oacute;n simple para almacenar datos de estudiantes con las siguientes rutas(routes) CRUD:</p>\r\n\r\n<p><img alt=\"crud routes\" src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+089bebf48f5e21a6eea47ab4cb112ef3+https://www.evernote.com/shard/s476/res/0827208c-5610-e021-16a6-640b4511f17d\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Antes de sumergirnos en la escritura de las rutas (routes), primero definamos el esquema relevante y configuremos MongoDB.</p>\r\n\r\n<h2>Esquema (Schema)</h2>\r\n\r\n<p>Definamos el Esquema (<a href=\"https://pydantic-docs.helpmanual.io/usage/schema/\">Schema</a>) en el que se basar&aacute;n nuestros datos, que representar&aacute; c&oacute;mo se almacenan los datos en la base de datos de MongoDB.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Los esquemas de Pydantic se utilizan para validar datos junto con serializar (JSON -&gt; Python) y deserializar (Python -&gt; JSON). En otras palabras, no sirve como <a href=\"https://docs.mongodb.com/manual/core/schema-validation/\">schema validator</a> de mongo.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>El la carpeta &quot;app/server/models&quot;, crea un archivo llamado <em><a href=\"http://student.py\">student.py</a></em>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>import code</p>\r\n\r\n<p>from email import message</p>\r\n\r\n<p>from msilib import schema</p>\r\n\r\n<p>from typing import Optional</p>\r\n\r\n<p>from pydantic import BaseModel, EmailStr, Field</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>class StudentSchema(BaseModel):</p>\r\n\r\n<p>fullname: str = Field(...)</p>\r\n\r\n<p>email: EmailStr = Field(...)</p>\r\n\r\n<p>course_of_study = str = Field(...)</p>\r\n\r\n<p>year: int = Field(..., gt=0, lt=9)</p>\r\n\r\n<p>gpa: float = Field(..., le=4.0)</p>\r\n\r\n<p>class Config:</p>\r\n\r\n<p>schema_extra = {</p>\r\n\r\n<p>&quot;example&quot;:{</p>\r\n\r\n<p>&quot;fullname&quot;: &quot;John Doe&quot;,</p>\r\n\r\n<p>&quot;email&quot;: &quot;jdoe@qccc.edu&quot;,</p>\r\n\r\n<p>&quot;course_of_study&quot;: &quot;Water resources engineering&quot;,</p>\r\n\r\n<p>&quot;year&quot;: 2,</p>\r\n\r\n<p>&quot;gpa&quot;: &quot;3.0&quot;,</p>\r\n\r\n<p>}</p>\r\n\r\n<p>}</p>\r\n\r\n<p>class UpdateStudentModel(BaseModel):</p>\r\n\r\n<p>fullname: Optional[str]</p>\r\n\r\n<p>email: Optional[str]</p>\r\n\r\n<p>course_of_study: Optional[str]</p>\r\n\r\n<p>year: Optional[str]</p>\r\n\r\n<p>gpa: Optional[str]</p>\r\n\r\n<p>class config:</p>\r\n\r\n<p>schema_extra = {</p>\r\n\r\n<p>&quot;example&quot;: {</p>\r\n\r\n<p>&quot;fullname&quot;: &quot;John Doe&quot;,</p>\r\n\r\n<p>&quot;email&quot;: &quot;jdoe@qccc.edu&quot;,</p>\r\n\r\n<p>&quot;course_of_study&quot;: &quot;Water resources and enviromental engeneering&quot;,</p>\r\n\r\n<p>&quot;year&quot;: 2,</p>\r\n\r\n<p>&quot;gpa&quot;: &quot;3.0&quot;,</p>\r\n\r\n<p>}</p>\r\n\r\n<p>}</p>\r\n\r\n<p>class UpdateStudentModel(BaseModel):</p>\r\n\r\n<p>fullname: Optional[str]</p>\r\n\r\n<p>email: Optional[str]</p>\r\n\r\n<p>course_of_study: Optional[str]</p>\r\n\r\n<p>year: Optional[str]</p>\r\n\r\n<p>gpa: Optional[str]</p>\r\n\r\n<p>class Confid:</p>\r\n\r\n<p>schema_extra = {</p>\r\n\r\n<p>&quot;example&quot;: {</p>\r\n\r\n<p>&quot;fullname&quot;: &quot;John Doe&quot;,</p>\r\n\r\n<p>&quot;email&quot;: &quot;jdoe@.qccc.edu&quot;,</p>\r\n\r\n<p>&quot;course_of_study&quot;: &quot;Water resources and environmental engineering&quot;,</p>\r\n\r\n<p>&quot;year&quot;: 4,</p>\r\n\r\n<p>&quot;gpa&quot;: &quot;4.0&quot;,</p>\r\n\r\n<p>}</p>\r\n\r\n<p>}</p>\r\n\r\n<p>def ResponseModel(data, message):</p>\r\n\r\n<p>return {</p>\r\n\r\n<p>&quot;data&quot;: [data],</p>\r\n\r\n<p>&quot;code&quot;: 200,</p>\r\n\r\n<p>&quot;message&quot;: message,</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>def ErrorResponseModel(error, code, message):</p>\r\n\r\n<p>return {</p>\r\n\r\n<p>&quot;error&quot;: error,</p>\r\n\r\n<p>&quot;code&quot;: code,</p>\r\n\r\n<p>&quot;message&quot;: message,</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En el c&oacute;digo de arriba, nosotros vamos a definir una Pydantic <a href=\"https://pydantic-docs.helpmanual.io/usage/schema/\">Schema</a> llamado StudentSchema que representa c&oacute;mo se almacenar&aacute;n los datos de los estudiantes en su base de datos MongoDB</p>\r\n\r\n<p>En Pydantic, los puntos suspensivos <a href=\"https://pydantic-docs.helpmanual.io/usage/models/#required-fields\">ellipsis</a>, ..., esto indica que este&nbsp; campo es requerido. este tambien puede ser remplazado con None o un valor predeterminado. En el StudentSchema, cada campo tiene puntos suspensivos, ya que cada campo es importante y el programa no debe continuar sin tener los valores establecidos.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En el campo gpa y year en la StudentSchema, nosotros agregamos los <a href=\"https://pydantic-docs.helpmanual.io/usage/schema/#field-customization\">validators</a> gt, lt, y le:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>gt y lt en el campo del year aseguran que el valor que pasado sea mayor que 0 y menor que 9. Como resultado, valores como 0, 10, 11 generar&aacute;n errores.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>El validador en el campo gpa&nbsp; se asegura que el valor que pasado sea igual o menor que 4.0.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Este esquema ayudar&aacute; a los usuarios a enviar solicitudes HTTP con la forma adecuada a la API, es decir, el tipo de datos a enviar y c&oacute;mo enviarlos.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>FastAPI usa Pyantic Schemas para documentar autom&aacute;ticamente modelos de datos junto con <a href=\"https://json-schema.org/\">Json Schema</a>. Luego la interfaz de usuario <a href=\"https://swagger.io/tools/swagger-ui/\">Swagger UI</a> representa los datos de los modelos de datos generados. Puede leer m&aacute;s sobre c&oacute;mo FastAPI genera documentaci&oacute;n API <a href=\"https://fastapi.tiangolo.com/features/#automatic-docs\">aqui</a>.</p>\r\n\r\n<p>Como usamos EmailStr, necesitamos instalar el validador de correo <a href=\"https://github.com/JoshData/python-email-validator\">email-validator</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Agregue las siguientes dependencias a su archivo <em>requirements.txt</em>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>pydantic[email]</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Instalarlos:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>pip install -r requirements.txt</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Con el esquema en su lugar, configuremos MongoDB antes de escribir las rutas para la API.</p>\r\n\r\n<h2>MongoDB</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En esta secci&oacute;n, conectaremos MongoDB y configuraremos nuestra aplicaci&oacute;n para comunicarse con &eacute;lla.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Segun <a href=\"https://en.wikipedia.org/wiki/MongoDB\">Wikipedia</a>, MongoDB es un programa de base de datos orientado a documentos multiplataforma. Clasificado como un programa de base de datos NoSQL, MongoDB utiliza documentos similares a JSON con esquemas opcionales.</p>\r\n\r\n<h3>MongoDB Configuration</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Si no tiene MongoDB instalado en su m&aacute;quina, consulte la gu&iacute;a de <a href=\"https://docs.mongodb.com/manual/installation/\">Installation</a> de los documentos. Una vez instalado, contin&uacute;e con la gu&iacute;a para ejecutar el proceso <a href=\"https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod\">mongod</a> daemon daemon. Una vez hecho esto, puede verificar que MongoDB est&eacute; funcionando conect&aacute;ndose a la instancia a trav&eacute;s del comando mongo shell:</p>\r\n\r\n<p>$ mongo</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Como referencia, este tutorial utiliza MongoDB Community Edition v5.0.6.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>$ mongo --version</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>MongoDB shell version v5.0.6</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Build Info: {</p>\r\n\r\n<p>&quot;version&quot;: &quot;5.0.6&quot;,</p>\r\n\r\n<p>&quot;gitVersion&quot;: &quot;212a8dbb47f07427dae194a9c75baec1d81d9259&quot;,</p>\r\n\r\n<p>&quot;modules&quot;: [],</p>\r\n\r\n<p>&quot;allocator&quot;: &quot;system&quot;,</p>\r\n\r\n<p>&quot;environment&quot;: {</p>\r\n\r\n<p>&quot;distarch&quot;: &quot;x86_64&quot;,</p>\r\n\r\n<p>&quot;target_arch&quot;: &quot;x86_64&quot;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>}</p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3>Motor Configuration</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, configuraremos <a href=\"https://motor.readthedocs.io/\">Motor</a>, un controlador MongoDB as&iacute;ncrono, para interactuar con la base de datos.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Comience agregando la dependencia al archivo de requisitos requirements.txt:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>motor</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Instalarlos:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>pip install -r requirements.txt</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>De vuelta en la aplicaci&oacute;n, agregue la informaci&oacute;n de conexi&oacute;n de la base de datos al archivo <em>app/server/<a href=\"http://database.py\">database.py</a></em>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>import motor.motor_asyncio</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>MONGO_DETAILS = &quot;mongodb://localhost:27017&quot;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_DETAILS)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>database = client.students</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>student_collection = database.get_collection(&quot;students_collection&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En el c&oacute;digo anterior, importamos Motor, definimos los detalles de la conexi&oacute;n y creamos un cliente a trav&eacute;s de <a href=\"https://motor.readthedocs.io/en/stable/api-asyncio/asyncio_motor_client.html#motor.motor_asyncio.AsyncIOMotorClient\">AsyncIOMotorClient</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Luego hicimos referencia a una base de datos llamada students y una colecci&oacute;n (similar a una tabla en una base de datos relacional) llamada students_collection. Dado que estas son solo referencias y no I/O( reales, tampoco requiere un await expression. When the first I/O se realiza la operaci&oacute;n, tanto la base de datos como la colecci&oacute;n se crear&aacute;n si a&uacute;n no existen.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, cree una funci&oacute;n de ayuda r&aacute;pida para analizar los resultados de una consulta de base de datos en un dictado de Python.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Agregue esto tambi&eacute;n al archivo app/server/database.py:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>import motor.motor_asyncio</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>MONGO_DETAILS = &quot;mongodb://localhost:27017&quot;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_DETAILS)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>database = client.students</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>student_collection = database.get_collection(&quot;students_collection&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#helper student function</p>\r\n\r\n<p>def student_helper(student)-&gt; dict:</p>\r\n\r\n<p>return {</p>\r\n\r\n<p>&quot;id&quot;: str(student[&quot;_id&quot;]),</p>\r\n\r\n<p>&quot;fullname&quot;: student[&quot;fullname&quot;],</p>\r\n\r\n<p>&quot;email&quot;: student[&quot;email&quot;],</p>\r\n\r\n<p>&quot;course_of_study&quot;: student[&quot;course_of_study&quot;],</p>\r\n\r\n<p>&quot;year&quot;: student[&quot;year&quot;],</p>\r\n\r\n<p>&quot;GPA&quot;: student[&quot;gpa&quot;],</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, escribamos las operaciones de la base de datos CRUD.</p>\r\n\r\n<h3>Operaciones CRUD de base de datos</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Comience importando el m&eacute;todo ObjectId del paquete <a href=\"https://github.com/py-bson/bson\">bson</a> en la parte superior del archivo app/server/<em><a href=\"http://database.py\">database.py</a></em> file:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>from bson.objectid import ObjectId</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>bson viene instalada como una dependencia del motor comes installed as a dependency of motor.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, agregue cada una de las siguientes funciones para las operaciones CRUD:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#helper student function</p>\r\n\r\n<p>def student_helper(student)-&gt; dict:</p>\r\n\r\n<p>return {</p>\r\n\r\n<p>&quot;id&quot;: str(student[&quot;_id&quot;]),</p>\r\n\r\n<p>&quot;fullname&quot;: student[&quot;fullname&quot;],</p>\r\n\r\n<p>&quot;email&quot;: student[&quot;email&quot;],</p>\r\n\r\n<p>&quot;course_of_study&quot;: student[&quot;course_of_study&quot;],</p>\r\n\r\n<p>&quot;year&quot;: student[&quot;year&quot;],</p>\r\n\r\n<p>&quot;GPA&quot;: student[&quot;gpa&quot;],</p>\r\n\r\n<p>}</p>\r\n\r\n<p># Recuperar todos los estudiantes presentes en la base de datos</p>\r\n\r\n<p>async def retrieve_students():</p>\r\n\r\n<p>students = []</p>\r\n\r\n<p>async for student in student_collection.find():</p>\r\n\r\n<p>students.append(student_helper(student))</p>\r\n\r\n<p>return students</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># Agregar un nuevo estudiante a la base de datos</p>\r\n\r\n<p>async def add_student(student_data: dict) -&gt; dict:</p>\r\n\r\n<p>student = await student_collection.insert_one(student_data)</p>\r\n\r\n<p>new_student = await student_collection.find_one({&#39;_id&#39;: student.insert_id})</p>\r\n\r\n<p>return student_helper(new_student)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># Recuperar un estudiante con una identificaci&oacute;n coincidente</p>\r\n\r\n<p>async def retrieve_student(id: str) -&gt; dict:</p>\r\n\r\n<p>student = await student_collection.find_one({&#39;_id&#39;: ObjectId(id)})</p>\r\n\r\n<p>if student:</p>\r\n\r\n<p>return student_helper(student)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># Actualizar a un estudiante con un ID coincidente</p>\r\n\r\n<p>async def update_student(id: str, data: dict) -&gt; dict:</p>\r\n\r\n<p># Retorna falso si se env&iacute;a un cuerpo de solicitud vac&iacute;o.</p>\r\n\r\n<p>if len(data) &lt; 1:</p>\r\n\r\n<p>return False</p>\r\n\r\n<p>student = await student_collection.find_one({&#39;_id&#39;: ObjectId(id)})</p>\r\n\r\n<p>if student:</p>\r\n\r\n<p>update_student = await student_collection.update_one({&#39;_id&#39;: ObjectId(id)}, {&#39;$set&#39;: data})</p>\r\n\r\n<p>if update_student:</p>\r\n\r\n<p>return True</p>\r\n\r\n<p>return False</p>\r\n\r\n<p># Eliminar un estudiante de la base de datos</p>\r\n\r\n<p>async def delete_student(id: str):</p>\r\n\r\n<p>student = await student_collection.find_one({&#39;_id&#39;: ObjectId(id)})</p>\r\n\r\n<p>if student:</p>\r\n\r\n<p>await student_collection.delete_one({&#39;_id&#39;: ObjectId(id)})</p>\r\n\r\n<p>return False</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En el c&oacute;digo anterior, definimos las operaciones asincr&oacute;nicas para crear, leer, actualizar y eliminar datos de estudiantes en la base de datos a trav&eacute;s de motor.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En las operaciones de actualizaci&oacute;n y borrado se busca al alumno en la base de datos para decidir si se realiza o no la operaci&oacute;n. Los valores devueltos gu&iacute;an c&oacute;mo enviar respuestas al usuario, en lo que trabajaremos en la siguiente secci&oacute;n.</p>\r\n\r\n<h2><strong>CRUD Routes (Rutas)</strong></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En esta secci&oacute;n, agregaremos las rutas para complementar las operaciones de la base de datos en el archivo de la base de datos.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En la carpeta &quot;rutas&quot;, cree un nuevo archivo llamado student.py y agr&eacute;guele el siguiente contenido:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>from fastapi import APIRouter, Body</p>\r\n\r\n<p>from fastapi.encoders import jsonable_encoder</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>from apps.server.database import (</p>\r\n\r\n<p>add_student,</p>\r\n\r\n<p>delete_student,</p>\r\n\r\n<p>retrieve_student,</p>\r\n\r\n<p>retrieve_students,</p>\r\n\r\n<p>update_student,</p>\r\n\r\n<p>)</p>\r\n\r\n<p>from apps.server.models.student import (</p>\r\n\r\n<p>ErrorResponseModel,</p>\r\n\r\n<p>ResponseModel,</p>\r\n\r\n<p>StudentSchema,</p>\r\n\r\n<p>UpdateStudentModel,</p>\r\n\r\n<p>)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>router = APIRouter()</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Usaremos el <a href=\"https://fastapi.tiangolo.com/tutorial/encoder/\">JSON Compatible Encoder</a> de FastAPI para convertir nuestros modelos a un formato que sea compatible con JSON.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Luego, conecta la ruta del estudiante en app/server/app.py:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>from fastapi import FastAPI</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>from apps.server.routes.student import router as StudentRouter</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>app = FastAPI()</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>app.include_router(StudentRouter, tags=[&quot;Student&quot;], prefix=&quot;/student&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@app.get(&quot;/&quot;, tags=[&quot;Root&quot;])</p>\r\n\r\n<p>async def read_root():</p>\r\n\r\n<p>return {&quot;message&quot;: &quot;Welcome to this fantastic app!&quot;}</p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3>Create (Crear)</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>De vuelta en el archivo de rutas, agregue el siguiente controlador para crear un nuevo student.py:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@router.post(&quot;/&quot;, response_description=&quot;Student data added into the database&quot;)</p>\r\n\r\n<p>async def add_student_data(student: StudentSchema = Body(...)):</p>\r\n\r\n<p>student = jsonable_encoder(student)</p>\r\n\r\n<p>new_student = await add_student(student)</p>\r\n\r\n<p>return ResponseModel(new_student, &quot;Student added successfully.&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Entonces, la ruta espera una carga &uacute;til que coincida con el formato de StudentSchema. Ejemplo:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&quot;fullname&quot;: &quot;John Doe&quot;,</p>\r\n\r\n<p>&quot;email&quot;: &quot;jdoe@x.edu.ng&quot;,</p>\r\n\r\n<p>&quot;course_of_study&quot;: &quot;Water resources engineering&quot;,</p>\r\n\r\n<p>&quot;year&quot;: 2,</p>\r\n\r\n<p>&quot;gpa&quot;: &quot;3.0&quot;,</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Inicie el servidor Uvicorn:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>python apps/main.py</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Y actualice la p&aacute;gina de documentaci&oacute;n de la API interactiva en http://localhost:8000/docs para ver la nueva ruta:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"swagger ui\" src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+b8235d15fa0cb43d87d534ff4e1a3f82+https://www.evernote.com/shard/s476/res/b059f7bf-866a-2d0c-192d-b4d83b328f38\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Pru&eacute;balo tambi&eacute;n:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Por lo tanto, cuando se env&iacute;a una solicitud al punto final, almacena un cuerpo de solicitud codificado en JSON en la variable student antes de llamar antes de llamar al m&eacute;todo de base de datos</p>\r\n\r\n<p>add_student y almacenar la respuesta en la variable new_student. La respuesta de la base de datos se devuelve a trav&eacute;s de ResponseModel.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+4bc913a61ce4074ce7fc2d1dba3e448e+https://www.evernote.com/shard/s476/res/0b079e6c-713c-7ba6-73e6-6c869b85d0bb\" style=\"width:nullpx\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Pruebe tambi&eacute;n los validadores:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Year debe ser mayor que 0 y menor que 10</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>GPA debe ser menor o igual a 4.0</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+db428c9d3028c6b7e4c87248e05c34ef+https://www.evernote.com/shard/s476/res/8286bf6e-9108-db0f-3410-e6ef91726ff1\" /></p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3>Read (Leer)</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Siguiendo adelante, agregue las siguientes rutas para recuperar a todos los estudiantes y a un solo estudiante:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@router.get(&quot;/&quot;, response_description=&quot;Students retrieved&quot;)</p>\r\n\r\n<p>async def get_students():</p>\r\n\r\n<p>students = await retrieve_students()</p>\r\n\r\n<p>if students:</p>\r\n\r\n<p>return ResponseModel(students, &quot;Students data retrieved successfully&quot;)</p>\r\n\r\n<p>return ResponseModel(students, &quot;Empty list returned&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@router.get(&quot;/{id}&quot;, response_description=&quot;Student data retrieved&quot;)</p>\r\n\r\n<p>async def get_student_data(id):</p>\r\n\r\n<p>student = await retrieve_student(id)</p>\r\n\r\n<p>if student:</p>\r\n\r\n<p>return ResponseModel(student, &quot;Student data retrieved successfully&quot;)</p>\r\n\r\n<p>return ErrorResponseModel(&quot;An error occurred.&quot;, 404, &quot;Student doesn&#39;t exist.&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+0a66a5df769879fa0e8c26fac3673e99+https://www.evernote.com/shard/s476/res/91f2c492-0214-d989-2ccb-a77eed8f6435\" /></p>\r\n\r\n<p>Qu&eacute; sucede si no pasa un ObjectId v&aacute;lido, por ejemplo, 1, para que el ID recupere la ruta de un solo estudiante? &iquest;C&oacute;mo puedes manejar mejor esto en la aplicaci&oacute;n?. Cuando se implemente la operaci&oacute;n de eliminaci&oacute;n, tendr&aacute; la oportunidad de probar la respuesta para una base de datos vac&iacute;a.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Update (Actualizar)</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, escriba la ruta individual para actualizar los datos del estudiante:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@router.put(&quot;/{id}&quot;)</p>\r\n\r\n<p>async def update_student_data(id: str, req: UpdateStudentModel = Body(...)):</p>\r\n\r\n<p>req = {k: v for k, v in req.dict().items() if v is not None}</p>\r\n\r\n<p>updated_student = await update_student(id, req)</p>\r\n\r\n<p>if updated_student:</p>\r\n\r\n<p>return ResponseModel(</p>\r\n\r\n<p>&quot;Student with ID: {} name update is successful&quot;.format(id),</p>\r\n\r\n<p>&quot;Student name updated successfully&quot;,</p>\r\n\r\n<p>)</p>\r\n\r\n<p>return ErrorResponseModel(</p>\r\n\r\n<p>&quot;An error occurred&quot;,</p>\r\n\r\n<p>404,</p>\r\n\r\n<p>&quot;There was an error updating the student data.&quot;,</p>\r\n\r\n<p>)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+b53e191c45b92cfb39c01bf44ab4d723+https://www.evernote.com/shard/s476/res/e65c9bdd-8dc4-3924-8bab-5c9e489ab807\" /></p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><strong>Delete (Borrar)</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Finalmente, agregue la ruta de eliminaci&oacute;n:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@router.delete(&quot;/{id}&quot;, response_description=&quot;Student data deleted from the database&quot;)</p>\r\n\r\n<p>async def delete_student_data(id: str):</p>\r\n\r\n<p>deleted_student = await delete_student(id)</p>\r\n\r\n<p>if deleted_student:</p>\r\n\r\n<p>return ResponseModel(</p>\r\n\r\n<p>&quot;Student with ID: {} removed&quot;.format(id), &quot;Student deleted successfully&quot;</p>\r\n\r\n<p>)</p>\r\n\r\n<p>return ErrorResponseModel(</p>\r\n\r\n<p>&quot;An error occurred&quot;, 404, &quot;Student with id {0} doesn&#39;t exist&quot;.format(id)</p>\r\n\r\n<p>)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Recupere el ID del estudiante que creaste anteriormente y pruebe la ruta de eliminaci&oacute;n:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+c0e2a54982fcd686c202960e9230d297+https://www.evernote.com/shard/s476/res/3dc78e14-760b-4c64-8208-ff35a37bd7a2\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Elimine a los estudiantes restantes y pruebe las rutas de lectura nuevamente, asegur&aacute;ndose de que las respuestas sean apropiadas para una base de datos vac&iacute;a.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>Deployment (Implementaci&oacute;n)</strong></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En esta secci&oacute;n, implementaremos la aplicaci&oacute;n en Heroku y configuraremos una base de datos en la nube para MongoDB.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>MongoDB Atlas</h3>\r\n\r\n<p>Antes de implementar, debemos configurar <a href=\"https://www.mongodb.com/cloud/atlas\">MongoDB Atlas</a>, un servicio de base de datos en la nube para que MongoDB aloje nuestra base de datos..</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Siga la <a href=\"https://docs.atlas.mongodb.com/getting-started/\">Gu&iacute;a de Introducci&oacute;n</a> donde crear&aacute; una cuenta, implementar&aacute; un cl&uacute;ster de nivel gratuito, configurar&aacute; un usuario y agregar&aacute; una direcci&oacute;n IP a la lista blanca.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Para fines de prueba, use 0.0.0.0/0 para la IP incluida en la lista blanca para permitir el acceso desde cualquier lugar. Para una aplicaci&oacute;n de producci&oacute;n, querr&aacute; restringir el acceso a una IP est&aacute;tica.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Una vez hecho esto, obtenga la informaci&oacute;n de conexi&oacute;n de la base de datos de su cl&uacute;ster haciendo clic en el bot&oacute;n &quot;Connect&quot;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+02073c0c6eedbf5c91df60efb7a6782b+https://www.evernote.com/shard/s476/res/217d4b36-0c6a-515e-cd49-1c26f07c90da\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Haz clic en la segunda opci&oacute;n, &quot;Connect to your application&quot;:</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+6118f89d72c069d42c86526f135e3c61+https://www.evernote.com/shard/s476/res/e1062de8-5490-9383-c491-9409718a98a6\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Copy the connection URL, making sure to update the password. Set the default database to &quot;students&quot; as well. It will look similar to:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>mongodb+srv://dbUser:&lt;your_password&gt;@cluster0.cyud5.mongodb.net/students?retryWrites=true&amp;w=majority</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En lugar de codificar este valor en nuestra aplicaci&oacute;n, definiremos que tiene una variable de entorno. Cree un nuevo archivo llamado .env en la ra&iacute;z del proyecto y la informaci&oacute;n de conexi&oacute;n:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>MONGO_DETAILS=your_connection_url</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Aseg&uacute;rese de reemplazar your_connection_url con la URL copiada.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, para simplificar la gesti&oacute;n de las variables de entorno en nuestra aplicaci&oacute;n, instalemos el paquete <a href=\"https://github.com/henriquebastos/python-decouple/\">Python Decouple</a>. Agr&eacute;guelo a su archivo de requisitos as&iacute;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>python-decouple</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Instalarlos:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>pip install -r requirements.txt</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En el archivo app/server/database.py, importe la biblioteca:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>from decouple import config</p>\r\n\r\n<p>El m&eacute;todo de config importado busca en el directorio ra&iacute;z un archivo .env y lee el contenido que se le pasa. Entonces, en nuestro caso, leer&aacute; la variable MONGO_DETAILS.</p>\r\n\r\n<p>A continuaci&oacute;n, cambie la variable MONGO_DETAILS a:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>MONGO_DETAILS = config(&quot;MONGO_DETAILS&quot;) # lee lq variable del environment (.env)</p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<p><strong>Pruebas locales (Testing Locally)</strong></p>\r\n\r\n<p>Antes de implementar, probemos la aplicaci&oacute;n localmente con la base de datos en la nube para asegurarnos de que la conexi&oacute;n est&eacute; configurada correctamente. Reinicie su servidor Uvicorn y pruebe cada ruta desde la documentaci&oacute;n interactiva en http://localhost:8000/docs.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Deber&iacute;a poder ver los datos en el tablero de Atlas:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+c18712349d2bd5faeb0962c1313119f0+https://www.evernote.com/shard/s476/res/e7db5894-1b96-b039-94aa-d8c9bcd0100c\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Implementaci&oacute;n en Heroku (Deploying to Heroku)</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Finalmente, implementemos la aplicaci&oacute;n en <a href=\"https://heroku.com/\">Heroku</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Heroku es una plataforma en la nube como servicio (PaaS) que se utiliza para implementar y escalar aplicaciones.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Si es necesario, <a href=\"https://signup.heroku.com/\">registrese</a> para obtener una cuenta Heroku e instale el <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">Heroku CLI</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Antes de continuar, cree un archivo .gitignore en el proyecto para evitar registrar la carpeta &quot;venv&quot; y el archivo .env en git:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>touch .gitignore</p>\r\n\r\n<p>Add the following:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># Environments</p>\r\n\r\n<p>.env</p>\r\n\r\n<p>venv/</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># Byte-compiled / optimized / DLL files</p>\r\n\r\n<p>__pycache__</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># Pyre type checker</p>\r\n\r\n<p>.pyre/</p>\r\n\r\n<p>.DS_Store</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A continuaci&oacute;n, agregue un Procfile a la ra&iacute;z de su proyecto:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>web: uvicorn apps.server.app:app --host 0.0.0.0 --port=$PORT</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Notas:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>El <a href=\"https://devcenter.heroku.com/articles/procfile\">Procfile</a> es un archivo de texto, ubicado en la ra&iacute;z de su proyecto, que gu&iacute;a a Heroku sobre c&oacute;mo ejecutar su aplicaci&oacute;n. Como estamos sirviendo una aplicaci&oacute;n web, definimos el tipo de proceso de web junto con el comando para servir Uvicorn.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Heroku expone din&aacute;micamente un puerto para que su aplicaci&oacute;n se ejecute en el momento de la implementaci&oacute;n, que se expone a trav&eacute;s de la variable de entorno $PORT.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Su proyecto ahora deber&iacute;a tener los siguientes archivos y carpetas:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>├── .env</p>\r\n\r\n<p>├── .gitignore</p>\r\n\r\n<p>├── Procfile</p>\r\n\r\n<p>├── LICENSE</p>\r\n\r\n<p>├── apps</p>\r\n\r\n<p>│ ├── __init__.py</p>\r\n\r\n<p>│ ├── main.py</p>\r\n\r\n<p>│ └── server</p>\r\n\r\n<p>│ ├── app.py</p>\r\n\r\n<p>│ ├── database.py</p>\r\n\r\n<p>│ ├── models</p>\r\n\r\n<p>│ │ └── student.py</p>\r\n\r\n<p>│ └── routes</p>\r\n\r\n<p>│ └── student.py</p>\r\n\r\n<p>├── README.md</p>\r\n\r\n<p>└── requirements.txt</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En la ra&iacute;z de tu proyecto, inicializa un nuevo repositorio git:</p>\r\n\r\n<p>Asumo que git ya esta instalado en la Computadora y pueden publicar al repositorio&nbsp; publico de git</p>\r\n\r\n<p>git init</p>\r\n\r\n<p>git add .</p>\r\n\r\n<p>git commit -m &quot;Mi primera fastapi and mongo applicacion&quot;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Ahora, podemos <a href=\"https://devcenter.heroku.com/articles/git#for-a-new-heroku-app\">crear</a> una nueva aplicaci&oacute;n en Heroku:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>heroku login</p>\r\n\r\n<p>heroku create</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Junto con la creaci&oacute;n de una nueva aplicaci&oacute;n, este comando crea un repositorio git remoto en Heroku para que podamos impulsar nuestra aplicaci&oacute;n para su implementaci&oacute;n. Luego establece esto como un control remoto en el repositorio local autom&aacute;ticamente para nosotros.</p>\r\n\r\n<p>Puede verificar que el control remoto est&eacute; configurado ejecutando git remote -v</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Tome nota de la URL de su aplicaci&oacute;n.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Como no agregamos el archivo .env a git, debemos configurar la variable de entorno dentro del entorno de Heroku:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>heroku config:set MONGO_DETAILS=&quot;your_connection_url&quot;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Nuevamente, aseg&uacute;rese de reemplazar your_connection_url con la URL de conexi&oacute;n real.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Env&iacute;e su c&oacute;digo a Heroku y aseg&uacute;rese de que se est&eacute; ejecutando al menos una instancia de la aplicaci&oacute;n:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>git push heroku master</p>\r\n\r\n<p>heroku ps:scale web=1</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Ejecute heroku open para abrir su aplicaci&oacute;n en su navegador predeterminado.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>heroku open</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"en-cache://tokenKey%3D%22AuthToken%3AUser%3A232901003%22+ac2b0391-9bb6-25e6-9626-f958b4c383cb+ba8b1b1d9189df9974528d48b12cc08c+https://www.evernote.com/shard/s476/res/389b5802-74c4-712e-6cf8-ef677e09c28b\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Ha implementado correctamente su aplicaci&oacute;n en Heroku. Pru&eacute;bela ahora si todas las funcionalidades CRUD trabajan.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Conclusi&oacute;n</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En este tutorial, aprendi&oacute; c&oacute;mo crear una aplicaci&oacute;n CRUD con FastAPI y MongoDB e implementarla en Heroku. Realice una autocomprobaci&oacute;n r&aacute;pida revisando los objetivos al comienzo del tutorial. Puede encontrar el c&oacute;digo utilizado en este tutorial en <a href=\"https://github.com/jjaramillo34/fastapi-mongo\">GitHub</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&iquest;Buscando por mas?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Configure pruebas unitarias y de integraci&oacute;n con pytest.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>A&ntilde;adir rutas adicionales.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Create a GitHub repo for your application and configure CI/CD with GitHub Actions. En este blog encontraras mas sobre <a href=\"https://github.blog/2022-02-02-build-ci-cd-pipeline-github-actions-four-steps/\">CI/CD GitHub Actions</a></p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Configure una IP est&aacute;tica en Heroku con <a href=\"https://elements.heroku.com/addons/fixie-socks\">Fixie Socks</a> y restrinja el acceso a la base de datos MongoDB Atlas.</p>\r\n\t</li>\r\n</ol>",
            "content": "En este tutorial, usted aprendera como desarrollar una API asincrónica con  FastAPI and MongoDB. Nosotros estaremos usando el paquete Motor para interactuar sincrónicamente con MongoDB.\r\n\r\nObjectivos\r\nAl final de este tutorial, podrás:\r\n\r\nDesarrollar una RESTful API con Python and FastAPI.\r\n\r\nInteractuar con MongoDB sincrónicamente.\r\n\r\nEjecutar MongoDB en la cloud con MongoDB Atlas\r\n\r\nImplementar una aplicación FastAPI en Heroku",
            "master": 1
        }
    },
    {
        "model": "blog.posttranslation",
        "pk": 2,
        "fields": {
            "language_code": "en",
            "title": "Create a CRUD Application with FastAPI and MongoDB",
            "title_short": "",
            "body": "<h1><strong>Crea una Aplicaci&oacute;n CRUD con FastAPI y MongoDB</strong></h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>En este tutorial, usted aprendera como desarrollar una API asincr&oacute;nica con&nbsp; <a href=\"https://fastapi.tiangolo.com/\">FastAPI</a>&nbsp;and&nbsp;<a href=\"https://www.mongodb.com/\">MongoDB</a>. Nosotros estaremos usando el paquete <a href=\"https://motor.readthedocs.io/\">Motor</a> para interactuar sincr&oacute;nicamente con MongoDB.</p>\r\n\r\n<h2><strong>Objectivos</strong></h2>\r\n\r\n<p>Al final de este tutorial, podr&aacute;s:</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Desarrollar una RESTful API con Python and FastAPI.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Interactuar con MongoDB sincr&oacute;nicamente.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Ejecutar MongoDB en la cloud con MongoDB Atlas</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Implementar una aplicaci&oacute;n FastAPI en Heroku</p>\r\n\t</li>\r\n</ol>\r\n\r\n<h2><strong>Configuraci&oacute;n Inicial</strong></h2>\r\n\r\n<p>Comience creando una nueva carpeta para guardar su proyecto llamado &quot;fastapi-mongo&quot;:</p>",
            "content": "Objectives \r\n\r\nBy the end of this tutorial, you will be able to:\r\n\r\nDevelop a RESTful API with Python and FastAPI.\r\n\r\nInteract with MongoDB synchronously.\r\n\r\nRun MongoDB in the cloud with MongoDB Atlas.\r\n\r\nDeploy a FastAPI application on Heroku.",
            "master": 1
        }
    },
    {
        "model": "blog.posttranslation",
        "pk": 3,
        "fields": {
            "language_code": "en",
            "title": "Test Blog in English One",
            "title_short": "",
            "body": "<h1><strong>Fusce risus nisl viverra et</strong></h1>\r\n\r\n<p>Vestibulum suscipit nulla quis orci. Sed cursus turpis vitae tortor. Curabitur ullamcorper ultricies nisi. Phasellus volutpat, metus eget egestas mollis, lacus lacus blandit dui, id egestas quam mauris ut lacus. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.</p>\r\n\r\n<p>Donec interdum, metus et hendrerit aliquet, dolor diam sagittis ligula, eget egestas libero turpis vel mi. Aliquam lobortis. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Nunc nec neque. Nullam tincidunt adipiscing enim.</p>\r\n\r\n<p>test@domain.tld</p>",
            "content": "Praesent vestibulum dapibus nibh. Aenean vulputate eleifend tellus. Nullam sagittis. In dui magna, posuere eget, vestibulum et, tempor auctor, justo. Vestibulum ullamcorper mauris at ligula.\r\n\r\nVivamus euismod mauris. Praesent adipiscing. Morbi mollis tellus ac sapien. In dui magna, posuere eget, vestibulum et, tempor auctor, justo. Ut tincidunt tincidunt erat.",
            "master": 2
        }
    },
    {
        "model": "blog.posttranslation",
        "pk": 4,
        "fields": {
            "language_code": "en",
            "title": "Test blog in English Two",
            "title_short": "",
            "body": "<h1><strong>Etiam sollicitudin ipsum eu pulvinar</strong></h1>\r\n\r\n<p>Etiam imperdiet imperdiet orci. Nullam accumsan lorem in dui. Nulla facilisi. Morbi vestibulum volutpat enim. Cras id dui.</p>\r\n\r\n<p>Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Maecenas vestibulum mollis diam. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed libero. Donec mollis hendrerit risus.</p>\r\n\r\n<p>Aliquam lobortis. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Cras id dui. Maecenas nec odio et ante tincidunt tempus. Aenean massa.</p>\r\n\r\n<p>http://wwww.domain.tld</p>",
            "content": "Pellentesque habitant morbi tristique senectus\r\n\r\nDuis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Curabitur suscipit suscipit tellus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. Curabitur at lacus ac velit ornare lobortis. Sed fringilla mauris sit amet nibh.\r\n\r\nVestibulum dapibus nunc ac augue. Donec posuere vulputate arcu. In hac habitasse platea dictumst. Etiam feugiat lorem non metus. Duis leo.",
            "master": 5
        }
    },
    {
        "model": "blog.posttranslation",
        "pk": 5,
        "fields": {
            "language_code": "en",
            "title": "Test blog in English Three",
            "title_short": "",
            "body": "<h1><strong>Curabitur ligula sapien tincidunt non</strong></h1>\r\n\r\n<p>Donec mollis hendrerit risus. Donec interdum, metus et hendrerit aliquet, dolor diam sagittis ligula, eget egestas libero turpis vel mi. Proin magna. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; In ac dui quis mi consectetuer lacinia. Nullam dictum felis eu pede mollis pretium.</p>\r\n\r\n<p>Nullam quis ante. Cras ultricies mi eu turpis hendrerit fringilla. Vestibulum facilisis, purus nec pulvinar iaculis, ligula mi congue nunc, vitae euismod ligula urna in dolor. Praesent ut ligula non mi varius sagittis. Phasellus blandit leo ut odio.</p>\r\n\r\n<p>Sed magna purus, fermentum eu, tincidunt eu, varius ut, felis. Mauris sollicitudin fermentum libero. Pellentesque posuere. Phasellus leo dolor, tempus non, auctor et, hendrerit quis, nisi. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero.</p>\r\n\r\n<p>http://wwww.domain.tld</p>",
            "content": "Aliquam eu nunc. Donec elit libero, sodales nec, volutpat a, suscipit non, turpis. Pellentesque auctor neque nec urna. Phasellus blandit leo ut odio. Donec orci lectus, aliquam ut, faucibus non, euismod id, nulla.\r\n\r\nVivamus aliquet elit ac nisl. Vivamus euismod mauris. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque commodo eros a enim. Etiam vitae tortor.",
            "master": 6
        }
    },
    {
        "model": "blog.posttranslation",
        "pk": 6,
        "fields": {
            "language_code": "en",
            "title": "Test Bog in English Fourth",
            "title_short": "",
            "body": "<h1><strong>Praesent ut ligula non mi</strong></h1>\r\n\r\n<p>Fusce pharetra convallis urna. Curabitur blandit mollis lacus. Maecenas egestas arcu quis ligula mattis placerat. Vestibulum rutrum, mi nec elementum vehicula, eros quam gravida nisl, id fringilla neque ante vel mi. Nam ipsum risus, rutrum vitae, vestibulum eu, molestie vel, lacus.</p>\r\n\r\n<p>Praesent ac massa at ligula laoreet iaculis. Quisque rutrum. Nullam nulla eros, ultricies sit amet, nonummy id, imperdiet feugiat, pede. Cras risus ipsum, faucibus ut, ullamcorper id, varius ac, leo. Maecenas vestibulum mollis diam.</p>\r\n\r\n<p>Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. Cras non dolor. Cras varius. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
            "content": "Quisque ut nisi. Nunc nulla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Fusce id purus. Sed magna purus, fermentum eu, tincidunt eu, varius ut, felis. Curabitur turpis.\r\n\r\nAliquam erat volutpat. Phasellus consectetuer vestibulum elit. Nam commodo suscipit quam. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Curabitur ullamcorper ultricies nisi.",
            "master": 7
        }
    },
    {
        "model": "blog.posttranslation",
        "pk": 7,
        "fields": {
            "language_code": "en",
            "title": "Test Blog in English Five",
            "title_short": "",
            "body": "<h1><strong>Nulla consequat massa quis enim</strong></h1>\r\n\r\n<p>Sed hendrerit. Nullam accumsan lorem in dui. In ut quam vitae odio lacinia tincidunt. Fusce egestas elit eget lorem. Sed augue ipsum, egestas nec, vestibulum et, malesuada adipiscing, dui.</p>\r\n\r\n<p>Suspendisse nisl elit, rhoncus eget, elementum ac, condimentum eget, diam. Suspendisse faucibus, nunc et pellentesque egestas, lacus ante convallis tellus, vitae iaculis lacus elit id tortor. Aenean viverra rhoncus pede. Nunc egestas, augue at pellentesque laoreet, felis eros vehicula leo, at malesuada velit leo quis pede. Pellentesque commodo eros a enim.</p>\r\n\r\n<p>Curabitur nisi. Aliquam lobortis. Phasellus magna. Sed libero. Suspendisse feugiat.</p>",
            "content": "Donec vitae orci sed dolor rutrum auctor. Maecenas ullamcorper, dui et placerat feugiat, eros pede varius nisi, condimentum viverra felis nunc et lorem. Cras non dolor. Praesent porttitor, nulla vitae posuere iaculis, arcu nisl dignissim dolor, a pretium mi sem ut ipsum. In consectetuer turpis ut velit.\r\n\r\nSed lectus. Vestibulum eu odio. Duis lobortis massa imperdiet quam. Morbi nec metus. Suspendisse feugiat.",
            "master": 8
        }
    },
    {
        "model": "blog.posttranslation",
        "pk": 8,
        "fields": {
            "language_code": "en",
            "title": "Test Blog in English Six",
            "title_short": "",
            "body": "<h1><strong>Phasellus blandit leo ut odio</strong></h1>\r\n\r\n<p>Nunc egestas, augue at pellentesque laoreet, felis eros vehicula leo, at malesuada velit leo quis pede. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Donec mollis hendrerit risus. Nullam cursus lacinia erat. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.</p>\r\n\r\n<p>Etiam feugiat lorem non metus. Praesent ac massa at ligula laoreet iaculis. Sed aliquam ultrices mauris. Donec posuere vulputate arcu. Nullam tincidunt adipiscing enim.</p>\r\n\r\n<p>Fusce vel dui. Maecenas egestas arcu quis ligula mattis placerat. Vivamus laoreet. Praesent ut ligula non mi varius sagittis. Pellentesque commodo eros a enim.</p>\r\n\r\n<p>31.7.2022</p>\r\n\r\n<p>&nbsp;</p>",
            "content": "Fusce vulputate eleifend sapien. Maecenas malesuada. Phasellus nec sem in justo pellentesque facilisis. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin faucibus arcu quis ante.\r\n\r\nSed in libero ut nibh placerat accumsan. Sed a libero. Phasellus volutpat, metus eget egestas mollis, lacus lacus blandit dui, id egestas quam mauris ut lacus. Donec venenatis vulputate lorem. Nunc nec neque.",
            "master": 9
        }
    },
    {
        "model": "blog.post",
        "pk": 1,
        "fields": {
            "cover": "media/featured_images/2022/07/30/blog-post-thumb-1_zybv50",
            "slug": "blog-1",
            "author": 1,
            "updated_on": "2022-07-31T23:38:47.726Z",
            "created_on": "2022-07-31T01:58:02.471Z",
            "status": 1
        }
    },
    {
        "model": "blog.post",
        "pk": 2,
        "fields": {
            "cover": "media/featured_images/2022/07/31/blog-post-thumb-2_d4fjvi",
            "slug": "test-blog-in-english-one",
            "author": 1,
            "updated_on": "2022-08-01T15:45:18.787Z",
            "created_on": "2022-08-01T00:05:01.567Z",
            "status": 1
        }
    },
    {
        "model": "blog.post",
        "pk": 5,
        "fields": {
            "cover": "media/featured_images/2022/07/31/blog-post-thumb-2_dn7now",
            "slug": "test-blog-in-english-two",
            "author": 1,
            "updated_on": "2022-08-01T00:13:51.093Z",
            "created_on": "2022-08-01T00:13:51.093Z",
            "status": 1
        }
    },
    {
        "model": "blog.post",
        "pk": 6,
        "fields": {
            "cover": "media/featured_images/2022/07/31/blog-post-thumb-3_gviski",
            "slug": "test-blog-in-blog-three",
            "author": 1,
            "updated_on": "2022-08-01T00:22:10.618Z",
            "created_on": "2022-08-01T00:22:10.618Z",
            "status": 1
        }
    },
    {
        "model": "blog.post",
        "pk": 7,
        "fields": {
            "cover": "media/featured_images/2022/08/01/blog-post-thumb-4_djumj0",
            "slug": "test-bog-in-english-fourth",
            "author": 1,
            "updated_on": "2022-08-01T15:44:46.349Z",
            "created_on": "2022-08-01T15:44:46.349Z",
            "status": 1
        }
    },
    {
        "model": "blog.post",
        "pk": 8,
        "fields": {
            "cover": "media/featured_images/2022/08/01/blog-post-thumb-5_hi2wkz",
            "slug": "test-blog-in-english-five",
            "author": 1,
            "updated_on": "2022-08-01T16:27:31.608Z",
            "created_on": "2022-08-01T16:27:31.608Z",
            "status": 1
        }
    },
    {
        "model": "blog.post",
        "pk": 9,
        "fields": {
            "cover": "media/featured_images/2022/08/01/blog-post-thumb-6_nqvawn",
            "slug": "test-blog-in-english-six",
            "author": 1,
            "updated_on": "2022-08-01T16:30:01.808Z",
            "created_on": "2022-08-01T16:30:01.808Z",
            "status": 1
        }
    }
]